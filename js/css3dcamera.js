// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    var CSS3DCamera, cssv;
    cssv = function(jqueryObj, name, value) {
      var prefices, prefix, _i, _len, _results;
      prefices = ['', '-moz-', '-webkit-', '-o-', '-ms-'];
      prefices = ['-webkit-'];
      _results = [];
      for (_i = 0, _len = prefices.length; _i < _len; _i++) {
        prefix = prefices[_i];
        _results.push(jqueryObj.css("" + prefix + name, value));
      }
      return _results;
    };
    CSS3DCamera = (function() {
      function CSS3DCamera() {
        this.initializeProjmatrix();
        this.initializeViewMatrix();
        this.transformMatrix = new THREE.Matrix4();
        this.setupDom();
      }

      CSS3DCamera.prototype.applyCss = function() {};

      CSS3DCamera.prototype.initializeProjmatrix = function() {
        var far, near, viewAngle, w, x, y, z;
        viewAngle = 1.0;
        far = -1;
        near = -0.001;
        y = 1.0 / Math.tan(viewAngle / 2.0);
        x = y;
        z = far / (far - near);
        w = -z * near;
        return this.projMatrix = new THREE.Matrix4(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 1, 0, 0, w, 0).transpose();
      };

      CSS3DCamera.prototype.initializeViewMatrix = function() {
        return this.viewMatrix = new THREE.Matrix4();
      };

      CSS3DCamera.prototype.setupDom = function() {
        var $body, child, e, flipTarget, _i, _j, _len, _len1, _ref, _results;
        this.$domCamera = $('<div>').attr('id', 'camera');
        this.$domView = $('<div>').attr('id', 'view');
        this.$domCamera.append(this.$domView);
        $body = $('body');
        _ref = $body.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          this.$domView.append(child);
        }
        $body.append(this.$domCamera);
        this.$domCamera.css({
          margin: '0px',
          padding: '0px',
          position: 'relative',
          left: '230px',
          top: '230px',
          background: 'blue'
        });
        this.$domView.css({
          margin: '0px',
          padding: '0px',
          position: 'relative',
          left: '-230px',
          top: '-230px',
          background: 'red'
        });
        cssv(this.$domCamera, 'perspective-origin', '0% 0%');
        cssv(this.$domView, 'perspective-origin', '0% 0%');
        flipTarget = $($('p'), $('p'));
        _results = [];
        for (_j = 0, _len1 = flipTarget.length; _j < _len1; _j++) {
          e = flipTarget[_j];
          e = $(e);
          cssv(e, 'transform-origin', '50% 50%');
          cssv(e, 'transform-style', 'preserve-3d');
          _results.push(cssv(e, 'transform', 'rotateX(30deg)'));
        }
        return _results;
      };

      CSS3DCamera.prototype.cssString = function(matrix) {
        var string, t;
        t = matrix.elements;
        string = [[t[0], t[4], t[8], t[12]].join(', '), [t[1], t[5], t[9], t[13]].join(', '), [t[2], t[6], t[10], t[14]].join(', '), [t[3], t[7], t[11], t[15]].join(', ')].join(',   ');
        return "matrix3d(" + string + ")";
      };

      CSS3DCamera.prototype.lookAt = function(p, a, u) {
        var at, p_x, p_y, p_z, pos, upTo, x, y, z;
        pos = p || new THREE.Vector3(0, 0, 0);
        at = a || new THREE.Vector3(0, 0, 0);
        upTo = u || new THREE.Vector3(0, 0, 1);
        z = at.clone().sub(pos).normalize();
        x = upTo.clone().cross(z).normalize();
        y = z.clone().cross(x).normalize().multiplyScalar(-1);
        p_x = -pos.dot(x);
        p_y = -pos.dot(y);
        p_z = -pos.dot(z);
        this.viewMatrix.set(x.x, y.x, z.x, 0, x.y, y.y, z.y, 0, x.z, y.z, z.z, 0, p_x, p_y, p_z, 1);
        this.transformMatrix.multiplyMatrices(this.viewMatrix, this.projMatrix).transpose();
        return cssv(this.$domCamera, 'transform', this.cssString(this.transformMatrix));
      };

      return CSS3DCamera;

    })();
    return window.CSS3DCamera = CSS3DCamera;
  })(jQuery);

}).call(this);

/*
//@ sourceMappingURL=css3dcamera.map
*/
